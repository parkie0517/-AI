import pandas as pd
import xlwt, xlrd
from google.colab import files
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
import numpy as np # linear algebra
from subprocess import check_output
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import math
import warnings
warnings.filterwarnings('ignore')

pd.set_option('display.max_columns', 10)                       # 출력할 열의 최대개수
pd.set_option('display.max_colwidth', 20)                      # 출력할 열의 너비
pd.set_option('display.unicode.east_asian_width', True)        # 유니코드 사용 너비 조정

#df1 = pd.read_excel("/content/Disease.xlsx")
#df2 = pd.read_excel("/content/Exam.xlsx")

#data = pd.merge(df1, df2)                                      # 두개의 파일을 머징
data = pd.read_excel("/content/MERGE.xlsx")

#data.to_excel('/content/Merge.xlsx')                  # 엑셀로 저장
#print('샘플의 개수 :', len(data))
#print(data[:5])
#print("질병 종류:", data["Disease"].unique(), sep="\n")  # 질병 종류 출력
#sns.barplot(data['DISEASE'], data['LDL'], ci=None)

def phi(i,theta,x):  #i goes from 1 to k
    mat_theta = np.matrix(theta[i])
    mat_x = np.matrix(x)
    num = math.exp(np.dot(mat_theta,mat_x.T))
    den = 0
    for j in range(0,k):
        mat_theta_j = np.matrix(theta[j])
        den = den + math.exp(np.dot(mat_theta_j,mat_x.T))
    phi_i = num/den
    return phi_i

def indicator(a,b):
    if a == b: return 1
    else: return 0

def get__der_grad(j,theta):
    sum = np.array([0 for i in range(0,n+1)])
    for i in range(0,m):
        p = indicator(y[i],j) - phi(j,theta,x.loc[i])
        sum = sum + (x.loc[i] *p)
    grad = -sum/m
    return grad

def gradient_descent(theta,alpha= 1/(10^4),iters=100):
    for j in range(0,k):
        for iter in range(iters):
            theta[j] = theta[j] - alpha * get__der_grad(j,theta)
    print('running iterations')
    return theta

def h_theta(x):
    x = np.matrix(x)
    h_matrix = np.empty((k,1))
    den = 0
    for j in range(0,k):
        den = den + math.exp(np.dot(theta_dash[j], x.T))
    for i in range(0,k):
        h_matrix[i] = math.exp(np.dot(theta_dash[i],x.T))
    h_matrix = h_matrix/den
    return h_matrix

train, test = train_test_split(data, test_size = 0.3)# in this, our main data is split into train and test
train = train.reset_index()
test = test.reset_index()

#x = train[['BP_SYS', 'FBS', 'TG', 'CRTN']]
x = train[['BP_SYS', 'FBS', 'TG', 'LDL', 'CRTN']]
n = x.shape[1]
m = x.shape[0]

y = train['DISEASE']
k = len(y.unique())
y.value_counts()

#x[5] = np.ones(x.shape[0]) #17번째 열 1로 초기화
x[6] = np.ones(x.shape[0])

x.shape

# x = pd.DataFrame(StandardScaler().fit_transform(x),columns= ['BP_SYS', 'FBS', 'TG', 'CRTN', '5'])
x = pd.DataFrame(StandardScaler().fit_transform(x), columns= ['BP_SYS', 'FBS', 'TG', 'LDL', 'CRTN', '6'])

theta = np.empty((k,n+1))
theta_dash = gradient_descent(theta)  #요기를 실행하고 나서 overflow가 발생합니다.
theta_dash


# x_u = test[['BP_SYS', 'FBS', 'TG', 'CRTN']]
x_u = test[['BP_SYS', 'FBS', 'TG', 'LDL', 'CRTN']]
n = x_u.shape[1]
m = x_u.shape[0]

y_true = test['DISEASE']
k = len(y_true.unique())
y_true.value_counts()

# x_u[5] = np.ones(x_u.shape[0])
x_u[6] = np.ones(x_u.shape[0])
x_u.shape

for index,row in x_u.iterrows():
    h_matrix = h_theta(row)
    prediction = int(np.where(h_matrix == h_matrix.max())[0])
    x_u.loc[index,'prediction'] = prediction

results = x_u
results['actual'] = y_true

results.head(10)

compare = results['prediction'] == results['actual']
correct = compare.value_counts()[1]
accuracy = correct/len(results)

accuracy * 100
